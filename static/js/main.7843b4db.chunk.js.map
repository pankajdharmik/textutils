{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","filter","element","Alert","alert","word","lower","charAt","slice","capitalize","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.7843b4db.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          {/* <Link className=\"nav-link\" to=\"/about\">About</Link> */}\r\n        </li>\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n        </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value) \r\n    }\r\n\r\n    // Credits: A\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text); \r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    // Credits: Coding Wala\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance();\r\n        msg.text = text;\r\n        window.speechSynthesis.speak(msg);\r\n      }\r\n\r\n    const [text, setText] = useState(''); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1 className='mb-4 my-2' >{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 my-2\">Speak</button>\r\n\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n\r\n  return (\r\n     props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n     </div>\r\n  )\r\n}","import './App.css';\n\nimport React, { useState } from 'react';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode,setMode] = useState('light');\n  const [alert,setAlert] = useState(null);\n\n  const showAlert = (message,type) =>{\n    setAlert({\n      msg:message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  \n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title = \"TextUtils-Dark Mode\";\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Dark mode has been disabled\",\"success\");\n      document.title = \"TextUtils-Light Mode\";\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container\">\n      {/* <About mode={mode}/> */}\n      {/* <Switch>\n          <Route path=\"/about\">\n              <About/>\n          </Route>\n          <Route path=\"/\"> */}\n          <TextForm heading= \"Enter text to analyze below\" mode={mode} showAlert={showAlert}/>\n          {/* </Route>\n        </Switch> */}\n      </div>\n    {/* </Router> */}\n    </>\n  );\n\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}